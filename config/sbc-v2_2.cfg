MEMORY {
  RAM:                start =    $0, size = $7F00, define = yes;
  IO:                 start = $7F00, size = $0100, define = yes;
  ROM:                start = $8000, size = $8000, define = yes;

  ZP:                 start =    $0, size =  $100, define = yes, type = rw;
  RAM_CPU_STACK:      start =  $100, size =  $100, define = no;
  RAM_OS:             start =  $200, size = $3E00, define = yes, type = rw;
  RAM_USER:           start = $4000, size = $3F00, define = yes, type = rw;

  IO_VIA1:            start = $7F00, size =    $F, define = yes;
  IO_VIA2:            start = $7F40, size =    $F, define = yes;
  IO_VIA3:            start = $7F80, size =    $F, define = yes;

  ROM_CSUM:           start = $8000, size =    $4, define = yes, type = ro;
  ROM_IMAGE:          start = $8004, size = $7FFC, define = yes, type = ro;
  ROM_IMAGE_VERSION:  start = $8004, size =    $8, define = yes, type = ro;
  ROM_IMAGE_OS:       start = $800C, size = $7FF4, define = yes, type = ro, file = %O;
}

SEGMENTS {
  ZEROPAGE: load = ZP,            type = zp,  define   = yes;
  DATA:     load = ROM_IMAGE_OS,  type = rw,  define   = yes, run = RAM_OS;
  BSS:      load = RAM_OS,        type = bss, define   = yes;
  HEAP:     load = RAM_OS,        type = bss, optional = yes;
  STARTUP:  load = ROM_IMAGE_OS,  type = ro;
  ONCE:     load = ROM_IMAGE_OS,  type = ro,  optional = yes;
  CODE:     load = ROM_IMAGE_OS,  type = ro;
  RODATA:   load = ROM_IMAGE_OS,  type = ro;
  VECTORS:  load = ROM_IMAGE_OS,  type = ro,  start    = $FFFA;
}

FEATURES {
  CONDES: segment = STARTUP,
          type    = constructor,
          label   = __CONSTRUCTOR_TABLE__,
          count   = __CONSTRUCTOR_COUNT__;
  CONDES: segment = STARTUP,
          type    = destructor,
          label   = __DESTRUCTOR_TABLE__,
          count   = __DESTRUCTOR_COUNT__;
  CONDES: segment = CODE,
          type    = interruptor,
          label   = __INTERRUPTOR_TABLE__,
          count   = __INTERRUPTOR_COUNT__,
          import  = __CALLIRQ__;
}

SYMBOLS {
  # C-runtime stack size
  __STACKSIZE__: type = export, value = $200;
}
